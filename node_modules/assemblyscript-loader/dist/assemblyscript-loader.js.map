{"version":3,"sources":["lib/loader.js","index.js"],"names":["prelude","modules","cache","entry","newRequire","name","jumped","currentRequire","require","previousRequire","err","Error","code","m","exports","call","x","id","module","long","define","amd","undefined","g","global","window","this","dcodeIO","Long","assemblyscriptLoader","1","initializeMemory","memoryInstance","malloc","memset","get_long_s","ptr","unsigned","lo","buffer","hi","LongModule","fromBits","low","high","set_long_s","value","memory","Uint8Array","byte","u8","get","set","sbyte","s8","short","s16","ushort","u16","int","s32","uint","u32","s64","ulong","u64","f64","Float64Array","f32","Float32Array","f8b","fle","float","double","array","capacity","length","base","arrayHeaderSize","create","elementByteSize","size","string","chars","Array","i","String","fromCharCode","apply","charCodeAt","load","file","options","imp","imports","exp","mem","mod","log","type","message","fn","console","info","warn","error","lib","messagePtr","resize","resolveReady","rejectReady","ready","Promise","resolve","reject","xfetch","then","result","arrayBuffer","WebAssembly","instantiate","catch","reason","keys","Object","instance","defineProperty","LogType","e","default","fs","fetch","fetch_node","eval","replace","readFile","data"],"mappings":"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","file":"assemblyscript-loader.js","sourcesContent":[";(function prelude(modules, cache, entry) {\r\n  var previousRequire = typeof require == \"function\" && require;\r\n\r\n  function newRequire(name, jumped) {\r\n    if (!cache[name]) {\r\n      if (!modules[name]) {\r\n        var currentRequire = typeof require == \"function\" && require;\r\n        if (!jumped && currentRequire) return currentRequire(name, true);\r\n        if (previousRequire) return previousRequire(name, true);\r\n        var err = new Error('Cannot find module \\'' + name + '\\'');\r\n        err.code = 'MODULE_NOT_FOUND';\r\n        throw err;\r\n      }\r\n      var m = cache[name] = { exports: {} };\r\n      modules[name][0].call(m.exports, function (x) {\r\n        var id = modules[name][1][x];\r\n        return newRequire(id ? id : x);\r\n      }, m, m.exports, prelude, modules, cache, entry);\r\n    }\r\n    return cache[name].exports;\r\n  }\r\n\r\n  // Be nice to CommonJS\r\n  if (typeof module !== \"undefined\" && module && module.exports) {\r\n    cache.long = { exports: previousRequire(\"long\") };\r\n    module.exports = newRequire(entry[0]);\r\n\r\n  // Be nice to AMD\r\n  } else if (typeof define === \"function\" && define.amd) {\r\n    define([\"long\"], function(long) {\r\n      cache.long = { exports: long || undefined };\r\n      return newRequire(entry[0]);\r\n    });\r\n\r\n  // Otherwise expose globally\r\n  } else {\r\n    var g = typeof global !== \"undefined\" && global\r\n         || typeof window !== \"undefined\" && window\r\n         || this;\r\n    if (g.dcodeIO && g.dcodeIO.Long) cache.long = { exports: g.dcodeIO.Long };\r\n    g.assemblyscriptLoader = newRequire(entry[0]);\r\n  }\r\n\r\n  return newRequire;\r\n})","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LogType;\r\n(function (LogType) {\r\n    LogType[LogType[\"LOG\"] = 0] = \"LOG\";\r\n    LogType[LogType[\"INFO\"] = 1] = \"INFO\";\r\n    LogType[LogType[\"WARN\"] = 2] = \"WARN\";\r\n    LogType[LogType[\"ERROR\"] = 3] = \"ERROR\";\r\n})(LogType = exports.LogType || (exports.LogType = {}));\r\nexports.arrayHeaderSize = 8;\r\nvar LongModule;\r\ntry {\r\n    LongModule = require(\"long\");\r\n    if (typeof LongModule !== \"function\")\r\n        LongModule = undefined;\r\n}\r\ncatch (e) { }\r\nfunction initializeMemory(memoryInstance, malloc, memset) {\r\n    var memory = memoryInstance;\r\n    var buffer = new Uint8Array(memoryInstance.buffer);\r\n    memory.byte = memory.u8 = {\r\n        get: function get_byte(ptr) {\r\n            return buffer[ptr];\r\n        },\r\n        set: function set_byte(ptr, value) {\r\n            buffer[ptr] = value;\r\n        }\r\n    };\r\n    memory.sbyte = memory.s8 = {\r\n        get: function get_sbyte(ptr) {\r\n            return buffer[ptr] << 24 >> 24;\r\n        },\r\n        set: function set_sbyte(ptr, value) {\r\n            buffer[ptr] = value;\r\n        }\r\n    };\r\n    memory.short = memory.s16 = {\r\n        get: function get_short(ptr) {\r\n            return (buffer[ptr]\r\n                | buffer[ptr + 1] << 8) << 16 >> 16;\r\n        },\r\n        set: function set_short(ptr, value) {\r\n            buffer[ptr] = value & 255;\r\n            buffer[ptr + 1] = value >>> 8 & 255;\r\n        }\r\n    };\r\n    memory.ushort = memory.u16 = {\r\n        get: function get_ushort(ptr) {\r\n            return buffer[ptr]\r\n                | buffer[ptr + 1] << 8;\r\n        },\r\n        set: function set_ushort(ptr, value) {\r\n            buffer[ptr] = value & 255;\r\n            buffer[ptr + 1] = value >>> 8 & 255;\r\n        }\r\n    };\r\n    memory.int = memory.s32 = {\r\n        get: function get_int(ptr) {\r\n            return buffer[ptr]\r\n                | buffer[ptr + 1] << 8\r\n                | buffer[ptr + 2] << 16\r\n                | buffer[ptr + 3] << 24;\r\n        },\r\n        set: function set_int(ptr, value) {\r\n            buffer[ptr] = value & 255;\r\n            buffer[ptr + 1] = value >>> 8 & 255;\r\n            buffer[ptr + 2] = value >>> 16 & 255;\r\n            buffer[ptr + 3] = value >>> 24;\r\n        }\r\n    };\r\n    memory.uint = memory.u32 = {\r\n        get: function get_uint(ptr) {\r\n            return (buffer[ptr]\r\n                | buffer[ptr + 1] << 8\r\n                | buffer[ptr + 2] << 16\r\n                | buffer[ptr + 3] << 24) >>> 0;\r\n        },\r\n        set: function set_uint(ptr, value) {\r\n            buffer[ptr] = value & 255;\r\n            buffer[ptr + 1] = value >>> 8 & 255;\r\n            buffer[ptr + 2] = value >>> 16 & 255;\r\n            buffer[ptr + 3] = value >>> 24;\r\n        }\r\n    };\r\n    function get_long_s(ptr, unsigned) {\r\n        var lo = buffer[ptr]\r\n            | buffer[ptr + 1] << 8\r\n            | buffer[ptr + 2] << 16\r\n            | buffer[ptr + 3] << 24;\r\n        var hi = buffer[ptr + 4]\r\n            | buffer[ptr + 5] << 8\r\n            | buffer[ptr + 6] << 16\r\n            | buffer[ptr + 7] << 24;\r\n        return LongModule\r\n            ? LongModule.fromBits(lo, hi, !!unsigned)\r\n            : { low: lo, high: hi, unsigned: !!unsigned };\r\n    }\r\n    function set_long_s(ptr, value) {\r\n        buffer[ptr] = value.low & 255;\r\n        buffer[ptr + 1] = value.low >>> 8 & 255;\r\n        buffer[ptr + 2] = value.low >>> 16 & 255;\r\n        buffer[ptr + 3] = value.low >>> 24;\r\n        buffer[ptr + 4] = value.high & 255;\r\n        buffer[ptr + 5] = value.high >>> 8 & 255;\r\n        buffer[ptr + 6] = value.high >>> 16 & 255;\r\n        buffer[ptr + 7] = value.high >>> 24;\r\n    }\r\n    memory.long = memory.s64 = {\r\n        get: function get_long(ptr) { return get_long_s(ptr, false); },\r\n        set: set_long_s\r\n    };\r\n    memory.ulong = memory.u64 = {\r\n        get: function get_ulong(ptr) { return get_long_s(ptr, true); },\r\n        set: set_long_s\r\n    };\r\n    var f64 = new Float64Array([-0]);\r\n    var f32 = new Float32Array(f64.buffer);\r\n    var f8b = new Uint8Array(f64.buffer);\r\n    var fle = f8b[7] === 128;\r\n    memory.float = memory.f32 = {\r\n        get: function get_float(ptr) {\r\n            if (fle) {\r\n                f8b[0] = buffer[ptr];\r\n                f8b[1] = buffer[ptr + 1];\r\n                f8b[2] = buffer[ptr + 2];\r\n                f8b[3] = buffer[ptr + 3];\r\n            }\r\n            else {\r\n                f8b[3] = buffer[ptr];\r\n                f8b[2] = buffer[ptr + 1];\r\n                f8b[1] = buffer[ptr + 2];\r\n                f8b[0] = buffer[ptr + 3];\r\n            }\r\n            return f32[0];\r\n        },\r\n        set: function set_float(ptr, value) {\r\n            f32[0] = value;\r\n            if (fle) {\r\n                buffer[ptr] = f8b[0];\r\n                buffer[ptr + 1] = f8b[1];\r\n                buffer[ptr + 2] = f8b[2];\r\n                buffer[ptr + 3] = f8b[3];\r\n            }\r\n            else {\r\n                buffer[ptr] = f8b[3];\r\n                buffer[ptr + 1] = f8b[2];\r\n                buffer[ptr + 2] = f8b[1];\r\n                buffer[ptr + 3] = f8b[0];\r\n            }\r\n        }\r\n    };\r\n    memory.double = memory.f64 = {\r\n        get: function get_double(ptr) {\r\n            if (fle) {\r\n                f8b[0] = buffer[ptr];\r\n                f8b[1] = buffer[ptr + 1];\r\n                f8b[2] = buffer[ptr + 2];\r\n                f8b[3] = buffer[ptr + 3];\r\n                f8b[4] = buffer[ptr + 4];\r\n                f8b[5] = buffer[ptr + 5];\r\n                f8b[6] = buffer[ptr + 6];\r\n                f8b[7] = buffer[ptr + 7];\r\n            }\r\n            else {\r\n                f8b[7] = buffer[ptr];\r\n                f8b[6] = buffer[ptr + 1];\r\n                f8b[5] = buffer[ptr + 2];\r\n                f8b[4] = buffer[ptr + 3];\r\n                f8b[3] = buffer[ptr + 4];\r\n                f8b[2] = buffer[ptr + 5];\r\n                f8b[1] = buffer[ptr + 6];\r\n                f8b[0] = buffer[ptr + 7];\r\n            }\r\n            return f64[0];\r\n        },\r\n        set: function set_double(ptr, value) {\r\n            f64[0] = value;\r\n            if (fle) {\r\n                buffer[ptr] = f8b[0];\r\n                buffer[ptr + 1] = f8b[1];\r\n                buffer[ptr + 2] = f8b[2];\r\n                buffer[ptr + 3] = f8b[3];\r\n                buffer[ptr + 4] = f8b[4];\r\n                buffer[ptr + 5] = f8b[5];\r\n                buffer[ptr + 6] = f8b[6];\r\n                buffer[ptr + 7] = f8b[7];\r\n            }\r\n            else {\r\n                buffer[ptr] = f8b[7];\r\n                buffer[ptr + 1] = f8b[6];\r\n                buffer[ptr + 2] = f8b[5];\r\n                buffer[ptr + 3] = f8b[4];\r\n                buffer[ptr + 4] = f8b[3];\r\n                buffer[ptr + 5] = f8b[2];\r\n                buffer[ptr + 6] = f8b[1];\r\n                buffer[ptr + 7] = f8b[0];\r\n            }\r\n        }\r\n    };\r\n    memory.array = {\r\n        get: function get_array(ptr) {\r\n            var capacity = memory.int.get(ptr);\r\n            var length = memory.int.get(ptr + 4);\r\n            return {\r\n                capacity: capacity,\r\n                length: length,\r\n                base: ptr + exports.arrayHeaderSize\r\n            };\r\n        },\r\n        create: function create_array(length, elementByteSize) {\r\n            var size = length * elementByteSize;\r\n            var ptr = malloc(exports.arrayHeaderSize + size);\r\n            memory.int.set(ptr, length);\r\n            memory.int.set(ptr + 4, length);\r\n            memset(ptr + exports.arrayHeaderSize, 0, size - exports.arrayHeaderSize);\r\n            return {\r\n                ptr: ptr,\r\n                base: ptr + exports.arrayHeaderSize\r\n            };\r\n        }\r\n    };\r\n    memory.string = {\r\n        get: function get_string(ptr) {\r\n            var capacity = memory.int.get(ptr);\r\n            var length = memory.int.get(ptr + 4);\r\n            var chars = new Array(length);\r\n            for (var i = 0, base = exports.arrayHeaderSize + ptr; i < length; ++i)\r\n                chars[i] = memory.ushort.get(base + (i << 1));\r\n            return String.fromCharCode.apply(String, chars);\r\n        },\r\n        create: function create_string(value) {\r\n            var size = value.length << 1;\r\n            var ptr = malloc(exports.arrayHeaderSize + size);\r\n            memory.int.set(ptr, value.length);\r\n            memory.int.set(ptr + 4, value.length);\r\n            memset(ptr + exports.arrayHeaderSize, 0, size - exports.arrayHeaderSize);\r\n            for (var i = 0, base = exports.arrayHeaderSize + ptr; i < value.length; ++i)\r\n                memory.ushort.set(base + (i << 1), value.charCodeAt(i));\r\n            return ptr;\r\n        }\r\n    };\r\n    return memory;\r\n}\r\nexports.initializeMemory = initializeMemory;\r\nfunction load(file, options) {\r\n    if (!options)\r\n        options = {};\r\n    var imp = (options.imports || {});\r\n    var exp = (options.exports || {});\r\n    var mem = (options.memory || null);\r\n    var mod = {\r\n        imports: imp,\r\n        exports: exp,\r\n        memory: mem,\r\n        log: function (type, message) {\r\n            var fn;\r\n            switch (type) {\r\n                case 1:\r\n                    fn = console.info;\r\n                    break;\r\n                case 2:\r\n                    fn = console.warn;\r\n                    break;\r\n                case 3:\r\n                    fn = console.error;\r\n                    break;\r\n                default: fn = console.log;\r\n            }\r\n            fn(message);\r\n        }\r\n    };\r\n    if (!imp.lib)\r\n        imp.lib = {};\r\n    if (!imp.lib.log)\r\n        imp.lib.log = function (type, messagePtr) { return mod.log(type, mem.string.get(messagePtr)); };\r\n    if (!imp.lib.resize)\r\n        imp.lib.resize = function () {\r\n            initializeMemory(mem, exp.malloc || imp.lib.malloc, exp.memset || imp.lib.memset);\r\n        };\r\n    var resolveReady;\r\n    var rejectReady;\r\n    if (!exp.ready)\r\n        exp.ready = new Promise(function (resolve, reject) {\r\n            resolveReady = resolve;\r\n            rejectReady = reject;\r\n        });\r\n    return (typeof file === \"string\"\r\n        ? exports.xfetch(file)\r\n            .then(function (result) { return result.arrayBuffer(); })\r\n            .then(function (buffer) { return WebAssembly.instantiate(buffer, imp); })\r\n        : WebAssembly.instantiate(file, imp))\r\n        .catch(function (reason) {\r\n        rejectReady(reason);\r\n        return Promise.reject(reason);\r\n    })\r\n        .then(function (result) {\r\n        for (var keys = Object.keys(result.instance.exports), i = 0; i < keys.length; ++i)\r\n            mod.exports[keys[i]] = result.instance.exports[keys[i]];\r\n        if (mod.exports.memory)\r\n            mem = mod.memory = mod.exports.memory;\r\n        imp.lib.resize();\r\n        resolveReady(mod);\r\n        return Promise.resolve(mod);\r\n    });\r\n}\r\nexports.load = load;\r\nexports.default = load;\r\nvar fs;\r\nexports.xfetch = typeof fetch === \"function\" ? fetch : function fetch_node(file) {\r\n    return new Promise(function (resolve, reject) {\r\n        (fs || (fs = eval(\"equire\".replace(/^/, \"r\"))(\"fs\")))\r\n            .readFile(file, function (err, data) {\r\n            return err\r\n                ? reject(err)\r\n                : resolve({ arrayBuffer: function () { return new Uint8Array(data).buffer; } });\r\n        });\r\n    });\r\n};\r\n"]}